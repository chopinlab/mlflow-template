services:
  # TimescaleDB (PostgreSQL + 시계열 확장)
  mlflow-db:
    image: timescale/timescaledb:2.21.1-pg17
    # env_file:
    #   - ./mlflow.env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      # TimescaleDB 최적화 설정
      POSTGRES_INITDB_ARGS: "--data-checksums"
      TS_TUNE_MEMORY: 2GB
      TS_TUNE_NUM_CPUS: 2
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # TimescaleDB 초기화 스크립트
      # - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    command: >
      postgres
      -c shared_preload_libraries=timescaledb
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=4MB
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mlflow-network

  minio:
    image: minio/minio:RELEASE.2025-04-22T22-12-26Z
    container_name: minio
    # env_file:
    #   - ./mlflow.env
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    restart: unless-stopped
    networks:
      - mlflow-network

  mlflow-server:
    build:
      context: .
      dockerfile: Dockerfile.mlflow
    container_name: mlflow-server
    restart: always
    depends_on:
      - mlflow-db
      - minio
    ports:
      - "8080:8080"
    # env_file:
    #   - mlflow.env
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
    command: >
      mlflow server 
      --backend-store-uri postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@mlflow-db:5432/${POSTGRES_DB}
      --artifacts-destination s3://mlflow-artifacts/
      --serve-artifacts
      --host 0.0.0.0
      --port 8080
      --workers 4
    networks:
      - mlflow-network

networks:
  mlflow-network:
    driver: bridge

volumes:
  postgres_data:
  minio_data:
  # mlflow_data: