services:
  # TimescaleDB (PostgreSQL + 시계열 확장)
  mlflow-db:
    image: timescale/timescaledb:2.21.1-pg17
    # env_file:
    #   - ./mlflow.env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      # TimescaleDB 최적화 설정
      POSTGRES_INITDB_ARGS: "--data-checksums"
      TS_TUNE_MEMORY: 2GB
      TS_TUNE_NUM_CPUS: 2
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # TimescaleDB 초기화 스크립트
      # - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    command: >
      postgres
      -c shared_preload_libraries=timescaledb
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=4MB
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mlflow-network

  minio:
    image: minio/minio:RELEASE.2025-04-22T22-12-26Z
    container_name: minio
    # env_file:
    #   - ./mlflow.env
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    restart: unless-stopped
    networks:
      - mlflow-network

  mlflow-server:
    build:
      context: .
      dockerfile: Dockerfile.mlflow
    container_name: mlflow-server
    restart: always
    depends_on:
      - mlflow-db
      - minio
    ports:
      - "8080:8080"
    # env_file:
    #   - mlflow.env
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
    command: >
      mlflow server 
      --backend-store-uri postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@mlflow-db:5432/${POSTGRES_DB}
      --artifacts-destination s3://mlflow-artifacts/
      --serve-artifacts
      --host 0.0.0.0
      --port 8080
      --workers 4
    networks:
      - mlflow-network

  # Label Studio - 웹 기반 라벨링 플랫폼
  label-studio:
    # image: heartexlabs/label-studio:1.13.1
    # image: heartexlabs/label-studio:1.20.0
    image: heartexlabs/label-studio:1.20.0
    container_name: label-studio
    restart: unless-stopped
    ports:
      - "8081:8080"
    environment:
      - LABEL_STUDIO_DISABLE_SIGNUP_WITHOUT_LINK=false
      - LABEL_STUDIO_USERNAME=admin
      - LABEL_STUDIO_PASSWORD=${LABEL_STUDIO_PASSWORD:-labelstudio123}
      # MinIO와 연동을 위한 설정
      - LABEL_STUDIO_CLOUD_STORAGE_TYPE=s3
      - LABEL_STUDIO_CLOUD_STORAGE_AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - LABEL_STUDIO_CLOUD_STORAGE_AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - LABEL_STUDIO_CLOUD_STORAGE_S3_ENDPOINT_URL=http://minio:9000
    volumes:
      - label_studio_data:/label-studio/data
      - ./data:/label-studio/local-files:ro  # 로컬 데이터 마운트
    depends_on:
      - minio
    networks:
      - mlflow-network

  # Prefect Server - 워크플로우 오케스트레이션 (SQLite 사용)
  prefect-server:
    image: prefecthq/prefect:3.4.11-python3.11
    container_name: prefect-server
    restart: unless-stopped
    ports:
      - "4200:4200"  # Prefect UI
    environment:
      - PREFECT_UI_URL=http://localhost:4200/api
      - PREFECT_API_URL=http://localhost:4200/api
      - PREFECT_SERVER_API_HOST=0.0.0.0
      - PREFECT_SERVER_API_PORT=4200
      # SQLite 사용 (PostgreSQL 대신)
      - PREFECT_API_DATABASE_CONNECTION_URL=sqlite+aiosqlite:////opt/prefect/prefect.db
    volumes:
      - prefect_data:/opt/prefect
      - ./flows:/opt/prefect/flows:ro  # 워크플로우 파일
    entrypoint: []
    command: >
      sh -c "
      prefect server start --host 0.0.0.0 --port 4200
      "
    networks:
      - mlflow-network

  # DVC Remote Storage (MinIO 기반)
  # DVC는 별도 서비스가 아닌 클라이언트 도구이므로,
  # MinIO를 DVC 원격 저장소로 사용하는 설정만 주석으로 제공
  # 사용법: dvc remote add -d myremote s3://dvc-storage/
  #        dvc remote modify myremote endpointurl http://localhost:9000

networks:
  mlflow-network:
    driver: bridge

volumes:
  postgres_data:
  minio_data:
  label_studio_data:
  prefect_data:
  # mlflow_data: